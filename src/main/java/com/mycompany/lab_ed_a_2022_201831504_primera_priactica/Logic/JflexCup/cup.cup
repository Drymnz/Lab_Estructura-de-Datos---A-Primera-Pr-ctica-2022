/*************************************CODE******************************************************/
package com.mycompany.lab_ed_a_2022_201831504_primera_priactica.Logic.JflexCup;

import com.mycompany.lab_ed_a_2022_201831504_primera_priactica.Logic.Client.Bet;
import com.mycompany.lab_ed_a_2022_201831504_primera_priactica.Logic.Client.Client;
import com.mycompany.lab_ed_a_2022_201831504_primera_priactica.Logic.List.ListSimple;
import com.mycompany.lab_ed_a_2022_201831504_primera_priactica.Start;

import java_cup.runtime.*;
    parser code {:
        
	public parser(Lexema lexer) {
        super(lexer);
        }

        public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }

        public void unrecovered_syntax_error(Symbol cur_token) {
            if (cur_token.sym == sym.EOF) {
             System.out.println("public void unrecoveredsyntax_error!!!!!!!!!!!!!!");
            }
        }
    /*
    code
     */
    private String name;
    private int[] horse = null;
    private int conter = 0;
    private double money = 0;

    private void restart() {
        this.conter = 0;
        this.money = 0;
        this.horse = null;
        this.name = "";
    }// 4  = > o(1)

    private void insertHorse(int add) {
        if (this.horse == null) {
            this.horse = new int[10];
            this.horse[this.conter] = add;
        } else if (this.conter <= 10) {
            this.horse[this.conter] = add;
        }
        this.conter++;
    }// 5  = > o(1)

    private void addBet() {
        boolean checker = (this.conter <= 10) && (this.money > 0) && (this.horse != null) && (!this.name.isBlank());
        if (checker) {
            if (Start.listBet == null) {
                Start.listBet = new ListSimple<>(new Bet(new Client(name), horse, money));
            } else {
                Start.listBet.add(new Bet(new Client(name), horse, money));
            }
        }
        restart();
    }// 12  = > o(1)

    /*
    code
     */

:}
/*************************************TERMINALES******************************************************/
terminal SALTO,MONTO,ENTERO;/**/
terminal NOMBRE;/*<nombre>*/
terminal TENTH,NINTH,EIGHTH,SEVENTH,SIXTH,FIFTH,FOURTH,THIRD,SECOND,FIRST;
/*************************************NO TERMINALES******************************************************/
non terminal i,d,m,n,l; /*terminal donde inicia*/
/*************************************PRECEDENCIA******************************************************/
/*************************************GRAMATICA******************************************************/
start with i;
/******operaciones matematicas*****/
i::= d i {:addBet();:}
| {:addBet();:}
;
d ::= l d 
|m d
|n d
| SALTO {:addBet();:}
| error d
;
n ::= NOMBRE:e {:name = e.toString();:};
m ::=  MONTO:m  {:money = Double.valueOf(m.toString());:}
|  ENTERO:m  {:money = Double.valueOf(m.toString());:}
;
l ::= TENTH{:insertHorse(10);:}
|NINTH  {:insertHorse(9);:}
|EIGHTH {:insertHorse(8);:}
|SEVENTH{:insertHorse(7);:}
|SIXTH  {:insertHorse(6);:}
|FIFTH  {:insertHorse(5);:}
|FOURTH {:insertHorse(4);:}
|THIRD  {:insertHorse(3);:}
|SECOND {:insertHorse(2);:}
|FIRST  {:insertHorse(1);:}
;